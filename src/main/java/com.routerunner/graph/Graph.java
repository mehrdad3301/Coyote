package main.java.com.routerunner.graph;import java.util.ArrayList;/**Graph represents underlying road network. It uses an adjacency listto capture relations between nodes. */public class Graph {    int numEdges ;    int numNodes ;    final ArrayList<ArrayList<Arc>> adjacencyList ;    ArrayList<Node> nodes ;    public Graph() {        this.numEdges = 0;        this.numNodes = 0 ;        this.nodes = new ArrayList<>();        this.adjacencyList = new ArrayList<>();    }    public void addNode(Node node) {        this.nodes.add(node) ;        this.numNodes += 1 ;    }    public void addEdge(int from, int to, int cost) {        if (nodes.size() < from || nodes.size() < to )            return ;        Arc arc = new Arc(to, cost) ;        this.adjacencyList.get(from).add(arc) ;        this.numEdges += 1 ;    }    public static Graph buildFromOSM(String fileAddress) throws Exception {        return new GraphBuilder(fileAddress).buildGraph() ;    }    @Override    public String toString() {        StringBuilder s = new StringBuilder("Graph{\n");        s.append("numEdges=").append(numEdges).append(",\n").                append("numNodes=").append(numNodes).append(",\n");        s.append("adjecency matrix= {\n");        for (int i = 0 ; i < adjacencyList.size() ; i++) {            s.append("\t").append(i).append("= {\n") ;            ArrayList<Arc> node = adjacencyList.get(i) ;            for (Arc arc : node) {                s.append("\t\t").append(arc.headNodeId).                        append(":").append(arc.cost).append("\n");            }            s.append("\n") ;        }        s.append("}");        return s.toString() ;    }    public int getNumEdges() {        return numEdges;    }    public int getNumNodes() {        return numNodes;    }    public ArrayList<ArrayList<Arc>> getAdjacencyList() {        return adjacencyList;    }    public ArrayList<Node> getNodes() {        return nodes;    }    /**    Arc is used as an edge in road network graph.    cost corresponds to edge weight and headNodeId is id of the node    the arc is pointing to. for example in A -------> B, B is headNode.     */    class Arc {        int headNodeId ;        int cost ;        public Arc(int headNodeId, int cost) {            this.headNodeId = headNodeId;            this.cost = cost;        }    }}